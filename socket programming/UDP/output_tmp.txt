Hi, how are you

all: server client

server: udpserver.c
	gcc -Wall udpserver.c -o server 

client: udpclient.c
	gcc -Wall udpclient.c -o client -lcrypto -lssl

clean:
	rm server client

all: server client

server: udpserver.c
	gcc -Wall udpserver.c -o server 

client: udpclient.c
	gcc -Wall udpclient.c -o client -lcrypto -lssl

clean:
	rm server client
all: server client

server: udpserver.c
	gcc -Wall udpserver.c -o server 

client: udpclient.c
	gcc -Wall udpclient.c -o client -lcrypto -lssl

clean:
	rm server clients


	/* 
 * udpclient.c - A simple UDP client
 * usage: udpclient <host> <port>
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#define TIME_OUT 20

#define BUFSIZE 1024
#
/* 
 * error - wrapper for perror
 */
void error(char *msg) {
    perror(msg);
    exit(0);
}

int main(int argc, char **argv) {
    int sockfd, portno, n;
    int serverlen;
    struct sockaddr_in serveraddr;
    struct hostent *server;
    char *hostname;
    char size_str[BUFSIZE];
    char buf[BUFSIZE];
    char filename[BUFSIZE];
    char filename_temp[BUFSIZE];
    int size, check;


   fd_set readfds, masterfds;
   struct timeval timeout;

    timeout.tv_sec = TIME_OUT;                    /*set the timeout to 10 seconds*/
    timeout.tv_usec = 0;

    FD_ZERO(&masterfds);
    FD_SET(sockfd, &masterfds);
    memcpy(&readfds, &masterfds, sizeof(fd_set));





    /* check command line arguments */
    if (argc != 3) {
       fprintf(stderr,"usage: %s <hostname> <port>\n", argv[0]);
       exit(0);
    }
    hostname = argv[1];
    portno = atoi(argv[2]);

    /* socket: create the socket */
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) 
        error("ERROR opening socket");

    /* gethostbyname: get the server's DNS entry */
    server = gethostbyname(hostname);
    if (server == NULL) {
        fprintf(stderr,"ERROR, no such host as %s\n", hostname);
        exit(0);
    }

    /* build the server's Internet address */
    bzero((char *) &serveraddr, sizeof(serveraddr));
    serveraddr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, 
	  (char *)&serveraddr.sin_addr.s_addr, server->h_length);
    serveraddr.sin_port = htons(portno);
   
    /* get message line from the user */
    printf("\nPlease enter file name:");

   
    /* get the filename */ 
    bzero(filename, BUFSIZE);
    fgets(filename, BUFSIZE, stdin);

    /*remove '\n' character from filename */
    strcpy(filename_temp,filename);
    filename_temp[strlen(filename_temp)-1] = '\0';    
    printf("The file name is %s\n", filename_temp);        


    /* Open the file to be send */